// File: mm_medtop.v
// Generated by MyHDL 0.9dev
// Date: Sat Mar 29 01:10:25 2014


`timescale 1ns/10ps

module mm_medtop (
    clock,
    reset,
    x,
    dvi,
    med,
    dvo
);
// 

input clock;
input reset;
input [7:0] x;
input dvi;
output [7:0] med;
reg [7:0] med;
output dvo;
reg dvo;

reg ok;
reg [9:0] okd;
reg [7:0] _med;
reg [3:0] xcnt;

reg [7:0] win [0:9-1];
reg [7:0] won [0:9-1];
reg [7:0] gmed_last_stage [0:9-1];
reg [7:0] gmed_g_8_x [0:9-1];
reg [7:0] gmed_g_7_x [0:9-1];
reg [7:0] gmed_g_6_x [0:9-1];
reg [7:0] gmed_g_5_x [0:9-1];
reg [7:0] gmed_g_4_x [0:9-1];
reg [7:0] gmed_g_3_x [0:9-1];
reg [7:0] gmed_g_2_x [0:9-1];
reg [7:0] gmed_g_1_x [0:9-1];




always @(posedge clock) begin: MM_MEDTOP_GMED_G_0_RTL
    integer ii;
    if (reset == 1) begin
        gmed_g_1_x[0] <= 0;
        gmed_g_1_x[1] <= 0;
        gmed_g_1_x[2] <= 0;
        gmed_g_1_x[3] <= 0;
        gmed_g_1_x[4] <= 0;
        gmed_g_1_x[5] <= 0;
        gmed_g_1_x[6] <= 0;
        gmed_g_1_x[7] <= 0;
        gmed_g_1_x[8] <= 0;
    end
    else begin
        for (ii=0; ii<9; ii=ii+1) begin
            gmed_g_1_x[ii] <= win[ii];
        end
        for (ii=1; ii<(9 - 1); ii=ii+2) begin
            gmed_g_1_x[ii] <= (win[ii] < win[(ii + 1)]) ? win[ii] : win[(ii + 1)];
            gmed_g_1_x[(ii + 1)] <= (win[ii] > win[(ii + 1)]) ? win[ii] : win[(ii + 1)];
        end
    end
end


always @(posedge clock) begin: MM_MEDTOP_GMED_G_1_RTL
    integer ii;
    if (reset == 1) begin
        gmed_g_2_x[0] <= 0;
        gmed_g_2_x[1] <= 0;
        gmed_g_2_x[2] <= 0;
        gmed_g_2_x[3] <= 0;
        gmed_g_2_x[4] <= 0;
        gmed_g_2_x[5] <= 0;
        gmed_g_2_x[6] <= 0;
        gmed_g_2_x[7] <= 0;
        gmed_g_2_x[8] <= 0;
    end
    else begin
        for (ii=0; ii<9; ii=ii+1) begin
            gmed_g_2_x[ii] <= gmed_g_1_x[ii];
        end
        for (ii=0; ii<(9 - 1); ii=ii+2) begin
            gmed_g_2_x[ii] <= (gmed_g_1_x[ii] < gmed_g_1_x[(ii + 1)]) ? gmed_g_1_x[ii] : gmed_g_1_x[(ii + 1)];
            gmed_g_2_x[(ii + 1)] <= (gmed_g_1_x[ii] > gmed_g_1_x[(ii + 1)]) ? gmed_g_1_x[ii] : gmed_g_1_x[(ii + 1)];
        end
    end
end


always @(posedge clock) begin: MM_MEDTOP_GMED_G_2_RTL
    integer ii;
    if (reset == 1) begin
        gmed_g_3_x[0] <= 0;
        gmed_g_3_x[1] <= 0;
        gmed_g_3_x[2] <= 0;
        gmed_g_3_x[3] <= 0;
        gmed_g_3_x[4] <= 0;
        gmed_g_3_x[5] <= 0;
        gmed_g_3_x[6] <= 0;
        gmed_g_3_x[7] <= 0;
        gmed_g_3_x[8] <= 0;
    end
    else begin
        for (ii=0; ii<9; ii=ii+1) begin
            gmed_g_3_x[ii] <= gmed_g_2_x[ii];
        end
        for (ii=1; ii<(9 - 1); ii=ii+2) begin
            gmed_g_3_x[ii] <= (gmed_g_2_x[ii] < gmed_g_2_x[(ii + 1)]) ? gmed_g_2_x[ii] : gmed_g_2_x[(ii + 1)];
            gmed_g_3_x[(ii + 1)] <= (gmed_g_2_x[ii] > gmed_g_2_x[(ii + 1)]) ? gmed_g_2_x[ii] : gmed_g_2_x[(ii + 1)];
        end
    end
end


always @(posedge clock) begin: MM_MEDTOP_GMED_G_3_RTL
    integer ii;
    if (reset == 1) begin
        gmed_g_4_x[0] <= 0;
        gmed_g_4_x[1] <= 0;
        gmed_g_4_x[2] <= 0;
        gmed_g_4_x[3] <= 0;
        gmed_g_4_x[4] <= 0;
        gmed_g_4_x[5] <= 0;
        gmed_g_4_x[6] <= 0;
        gmed_g_4_x[7] <= 0;
        gmed_g_4_x[8] <= 0;
    end
    else begin
        for (ii=0; ii<9; ii=ii+1) begin
            gmed_g_4_x[ii] <= gmed_g_3_x[ii];
        end
        for (ii=0; ii<(9 - 1); ii=ii+2) begin
            gmed_g_4_x[ii] <= (gmed_g_3_x[ii] < gmed_g_3_x[(ii + 1)]) ? gmed_g_3_x[ii] : gmed_g_3_x[(ii + 1)];
            gmed_g_4_x[(ii + 1)] <= (gmed_g_3_x[ii] > gmed_g_3_x[(ii + 1)]) ? gmed_g_3_x[ii] : gmed_g_3_x[(ii + 1)];
        end
    end
end


always @(posedge clock) begin: MM_MEDTOP_GMED_G_4_RTL
    integer ii;
    if (reset == 1) begin
        gmed_g_5_x[0] <= 0;
        gmed_g_5_x[1] <= 0;
        gmed_g_5_x[2] <= 0;
        gmed_g_5_x[3] <= 0;
        gmed_g_5_x[4] <= 0;
        gmed_g_5_x[5] <= 0;
        gmed_g_5_x[6] <= 0;
        gmed_g_5_x[7] <= 0;
        gmed_g_5_x[8] <= 0;
    end
    else begin
        for (ii=0; ii<9; ii=ii+1) begin
            gmed_g_5_x[ii] <= gmed_g_4_x[ii];
        end
        for (ii=1; ii<(9 - 1); ii=ii+2) begin
            gmed_g_5_x[ii] <= (gmed_g_4_x[ii] < gmed_g_4_x[(ii + 1)]) ? gmed_g_4_x[ii] : gmed_g_4_x[(ii + 1)];
            gmed_g_5_x[(ii + 1)] <= (gmed_g_4_x[ii] > gmed_g_4_x[(ii + 1)]) ? gmed_g_4_x[ii] : gmed_g_4_x[(ii + 1)];
        end
    end
end


always @(posedge clock) begin: MM_MEDTOP_GMED_G_5_RTL
    integer ii;
    if (reset == 1) begin
        gmed_g_6_x[0] <= 0;
        gmed_g_6_x[1] <= 0;
        gmed_g_6_x[2] <= 0;
        gmed_g_6_x[3] <= 0;
        gmed_g_6_x[4] <= 0;
        gmed_g_6_x[5] <= 0;
        gmed_g_6_x[6] <= 0;
        gmed_g_6_x[7] <= 0;
        gmed_g_6_x[8] <= 0;
    end
    else begin
        for (ii=0; ii<9; ii=ii+1) begin
            gmed_g_6_x[ii] <= gmed_g_5_x[ii];
        end
        for (ii=0; ii<(9 - 1); ii=ii+2) begin
            gmed_g_6_x[ii] <= (gmed_g_5_x[ii] < gmed_g_5_x[(ii + 1)]) ? gmed_g_5_x[ii] : gmed_g_5_x[(ii + 1)];
            gmed_g_6_x[(ii + 1)] <= (gmed_g_5_x[ii] > gmed_g_5_x[(ii + 1)]) ? gmed_g_5_x[ii] : gmed_g_5_x[(ii + 1)];
        end
    end
end


always @(posedge clock) begin: MM_MEDTOP_GMED_G_6_RTL
    integer ii;
    if (reset == 1) begin
        gmed_g_7_x[0] <= 0;
        gmed_g_7_x[1] <= 0;
        gmed_g_7_x[2] <= 0;
        gmed_g_7_x[3] <= 0;
        gmed_g_7_x[4] <= 0;
        gmed_g_7_x[5] <= 0;
        gmed_g_7_x[6] <= 0;
        gmed_g_7_x[7] <= 0;
        gmed_g_7_x[8] <= 0;
    end
    else begin
        for (ii=0; ii<9; ii=ii+1) begin
            gmed_g_7_x[ii] <= gmed_g_6_x[ii];
        end
        for (ii=1; ii<(9 - 1); ii=ii+2) begin
            gmed_g_7_x[ii] <= (gmed_g_6_x[ii] < gmed_g_6_x[(ii + 1)]) ? gmed_g_6_x[ii] : gmed_g_6_x[(ii + 1)];
            gmed_g_7_x[(ii + 1)] <= (gmed_g_6_x[ii] > gmed_g_6_x[(ii + 1)]) ? gmed_g_6_x[ii] : gmed_g_6_x[(ii + 1)];
        end
    end
end


always @(posedge clock) begin: MM_MEDTOP_GMED_G_7_RTL
    integer ii;
    if (reset == 1) begin
        gmed_g_8_x[0] <= 0;
        gmed_g_8_x[1] <= 0;
        gmed_g_8_x[2] <= 0;
        gmed_g_8_x[3] <= 0;
        gmed_g_8_x[4] <= 0;
        gmed_g_8_x[5] <= 0;
        gmed_g_8_x[6] <= 0;
        gmed_g_8_x[7] <= 0;
        gmed_g_8_x[8] <= 0;
    end
    else begin
        for (ii=0; ii<9; ii=ii+1) begin
            gmed_g_8_x[ii] <= gmed_g_7_x[ii];
        end
        for (ii=0; ii<(9 - 1); ii=ii+2) begin
            gmed_g_8_x[ii] <= (gmed_g_7_x[ii] < gmed_g_7_x[(ii + 1)]) ? gmed_g_7_x[ii] : gmed_g_7_x[(ii + 1)];
            gmed_g_8_x[(ii + 1)] <= (gmed_g_7_x[ii] > gmed_g_7_x[(ii + 1)]) ? gmed_g_7_x[ii] : gmed_g_7_x[(ii + 1)];
        end
    end
end


always @(posedge clock) begin: MM_MEDTOP_GMED_G_8_RTL
    integer ii;
    if (reset == 1) begin
        gmed_last_stage[0] <= 0;
        gmed_last_stage[1] <= 0;
        gmed_last_stage[2] <= 0;
        gmed_last_stage[3] <= 0;
        gmed_last_stage[4] <= 0;
        gmed_last_stage[5] <= 0;
        gmed_last_stage[6] <= 0;
        gmed_last_stage[7] <= 0;
        gmed_last_stage[8] <= 0;
    end
    else begin
        for (ii=0; ii<9; ii=ii+1) begin
            gmed_last_stage[ii] <= gmed_g_8_x[ii];
        end
        for (ii=1; ii<(9 - 1); ii=ii+2) begin
            gmed_last_stage[ii] <= (gmed_g_8_x[ii] < gmed_g_8_x[(ii + 1)]) ? gmed_g_8_x[ii] : gmed_g_8_x[(ii + 1)];
            gmed_last_stage[(ii + 1)] <= (gmed_g_8_x[ii] > gmed_g_8_x[(ii + 1)]) ? gmed_g_8_x[ii] : gmed_g_8_x[(ii + 1)];
        end
    end
end


always @(gmed_last_stage[0], gmed_last_stage[1], gmed_last_stage[2], gmed_last_stage[3], gmed_last_stage[4], gmed_last_stage[5], gmed_last_stage[6], gmed_last_stage[7], gmed_last_stage[8]) begin: MM_MEDTOP_GMED_RTL
    integer ii;
    for (ii=0; ii<9; ii=ii+1) begin
        won[ii] = gmed_last_stage[ii];
    end
    _med = gmed_last_stage[4];
end


always @(okd) begin: MM_MEDTOP_RTL_ROR
    integer ii;
    reg o;
    o = okd[0];
    for (ii=1; ii<9; ii=ii+1) begin
        o = (okd[ii] || o);
    end
    ok = o ? 1'b0 : 1'b1;
end


always @(posedge clock) begin: MM_MEDTOP_RTL_IN
    if (reset == 1) begin
        med <= 0;
        dvo <= 0;
        xcnt <= 1;
        okd <= 0;
        win[0] <= 0;
        win[1] <= 0;
        win[2] <= 0;
        win[3] <= 0;
        win[4] <= 0;
        win[5] <= 0;
        win[6] <= 0;
        win[7] <= 0;
        win[8] <= 0;
    end
    else begin
        okd <= (okd >>> 1);
        dvo <= okd[0];
        med <= _med;
        if (((xcnt == 9) && dvi)) begin
            win[($signed({1'b0, xcnt}) - 1)] <= x;
            okd[9] <= 1'b1;
            xcnt <= 1;
        end
        else if ((ok && dvi)) begin
            win[($signed({1'b0, xcnt}) - 1)] <= x;
            xcnt <= (xcnt + 1);
        end
    end
end

endmodule
